public class LongestCommonSubsequence {
    // Recurtion -> Time complexity: O(2^(n+m))
    public static int lcsRec(String str1, String str2, int n, int m) {
        if (n == 0 || m == 0) {
            return 0;
        }

        if (str1.charAt(n - 1) == str2.charAt(m - 1)) { // Same
            return lcsRec(str1, str2, n - 1, m - 1) + 1;
        } else { // Different
            int ans1 = lcsRec(str1, str2, n - 1, m);
            int ans2 = lcsRec(str1, str2, n, m - 1);
            return Math.max(ans1, ans2);
        }
    }

    // Memoization -> Time complexity: O(n * m)
    public static int lcsMemo(String str1, String str2, int n, int m, int dp[][]) {
        if (n == 0 || m == 0) {
            return 0;
        }

        if (dp[n][m] != -1) {
            return dp[n][m];
        }

        if (str1.charAt(n - 1) == str2.charAt(m - 1)) { // Same
            return dp[n][m] = lcsMemo(str1, str2, n - 1, m - 1, dp) + 1;
        } else { // Different
            // int ans1 = lcsMemo(str1, str2, n - 1, m, dp);
            // int ans2 = lcsMemo(str1, str2, n, m - 1, dp);
            // return dp[n][m] = Math.max(ans1, ans2);
            return dp[n][m] = Math.max(lcsMemo(str1, str2, n - 1, m, dp), lcsMemo(str1, str2, n, m - 1, dp));
        }
    }

    // Tabulation -> Time complexity: O(n * m)
    public static int lcsTab(String str1, String str2) {
        int dp[][] = new int[str1.length() + 1][str2.length() + 1];

        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                dp[i][j] = 0;
            }
        }

        for (int i = 1; i < str1.length() + 1; i++) {
            for (int j = 1; j < str2.length() + 1; j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        return dp[str1.length()][str2.length()];
    }

    public static void main(String[] args) {
        String str1 = "abcdeg";
        String str2 = "abedg";

        System.out.println("By recursion: " + lcsRec(str1, str2, str1.length(), str2.length()));

        // Memoization
        int dp[][] = new int[str1.length() + 1][str2.length() + 1]; // str1.length() = n & str2.length() = m

        for (int i = 0; i < dp.length; i++) {
            for (int j = 0; j < dp[0].length; j++) {
                dp[i][j] = -1;
            }
        }

        System.out.println("By memoization: " + lcsMemo(str1, str2, str1.length(), str2.length(), dp));

        // Tabulation
        System.out.println("By tabulation: " + lcsTab(str1, str2));
    }
}
