import java.util.Arrays;

public class ClimbingStairs {
    // Memoization -> Time complexity: O(n)
    public static int countWays(int n, int dp[]) {
        // Base case
        if (n == 0) {
            return 1;
        }
        if (n < 0) {
            return 0;
        }
        // Already calculated
        if (dp[n] != -1) {
            return dp[n];
        }
        dp[n] = countWays(n - 1, dp) + countWays(n - 2, dp);
        return dp[n];
    }

    public static int countWaysTab(int n) {
        int dp[] = new int[n + 1];
        dp[0] = 1;

        // Tabulation loop -> Time complexity: O(n)
        for (int i = 1; i < dp.length; i++) {
            if (i == 1) {
                dp[i] = dp[i - 1] + 0; // dp[-ve] = 0
            } else {
                dp[i] = dp[i - 1] + dp[i - 2];
            }
        }
        return dp[n];
    }

    public static void main(String args[]) {
        int n = 5;
        int dp[] = new int[n + 1];
        Arrays.fill(dp, -1);
        System.out.println("By memoization method: " + countWays(n, dp));
        System.out.println("By tabulation method: " + countWaysTab(n));
    }
}
