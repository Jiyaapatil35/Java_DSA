// Time complexity: O(n + m)
import java.util.*;

public class UnionAndIntersection {
    public static void main(String args[]) {
        int arr1[] = { 7, 3, 9 };
        int arr2[] = { 6, 3, 9, 2, 9, 4 };

        // Union
        HashSet<Integer> union = new HashSet<>();

        for (int i = 0; i < arr1.length; i++) {
            union.add(arr1[i]);
        }

        for (int i = 0; i < arr2.length; i++) {
            union.add(arr2[i]);
        }

        System.out.println("Union = " + union.size());

        // Intersection
        HashSet<Integer> intersection = new HashSet<>();
        int intersectionCount = 0;

        for (int i = 0; i < arr1.length; i++) {
            intersection.add(arr1[i]);
        }

        for (int i = 0; i < arr2.length; i++) {
            if (intersection.contains(arr2[i])) {
                intersectionCount++;
                intersection.remove(arr2[i]);
            }
        }

        System.out.println("Intersection = " + intersectionCount);
    }
}
