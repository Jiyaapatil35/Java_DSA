public class MaxSubarraySum {
    // Bruteforce -> O(n^3)
    public static void maxSubarraySum1(int nums[]) {
        int maxSum = Integer.MIN_VALUE;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                int currSum = 0;
                for (int k = i; k <= j; k++) {
                    currSum += nums[k];
                }
                maxSum = Math.max(maxSum, currSum);
            }
        }
        System.out.println("Max subarray sum is : " + maxSum);
    }

    // Optimization1 : Prefix Sum array -> O(n^2)
    public static void maxSubarraySum2(int nums[]) {
        int maxSum = Integer.MIN_VALUE;

        int prefix[] = new int[nums.length];
        prefix[0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            prefix[i] = prefix[i - 1] + nums[i];
        }
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                int currSum = i == 0 ? prefix[j] : prefix[j] - prefix[i - 1];
                maxSum = Math.max(maxSum, currSum);
            }
        }
        System.out.println("Max subarray sum is : " + maxSum);
    }

    // Kadane's Algorithm -> O(n)
    public static void maxSubarraySum3(int nums[]) {
        int cs = 0;
        int ms = 0;
        for (int i = 0; i < nums.length; i++) {
            cs = cs + nums[i];
            if (cs < 0)
                cs = 0;
            ms = Math.max(ms, cs);
        }
        System.out.println("Max subarray sum is : " + ms);
    }

    public static void main(String args[]) {
        int nums[] = { 1, -2, 6, -1, 3 }; // Max subarray sum = 8
        maxSubarraySum1(arr);
        maxSubarraySum2(arr);
        maxSubarraySum3(arr);
    }
}
